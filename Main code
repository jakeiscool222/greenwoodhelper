<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Greenwood Helper</title>

  <!-- favicon -->
  <link rel="icon" type="image/svg+xml"
        href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><rect width=\"32\" height=\"32\" rx=\"6\" fill=\"%2323c463\"/><text x=\"16\" y=\"22\" font-family='Poppins, sans-serif' font-size=\"20\" text-anchor=\"middle\" fill=\"white\">G</text></svg>'">

  <!-- fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin></script>

  <!-- styles -->
  <style>
  :root{
    --brand:#23c463;--brand-dark:#1ba355;
    --bg:#080808;  --card:#141414; --text:#f5f5f5;
    --radius:22px; --shadow:0 6px 22px rgba(0,0,0,.4);
    --t:.25s cubic-bezier(.4,0,.2,1)
  }
  *{box-sizing:border-box;margin:0;padding:0;font-family:"Poppins",system-ui,sans-serif}
  html,body{height:100%}
  body{background:var(--bg);color:var(--text);display:flex;flex-direction:column;min-height:100vh;scroll-behavior:smooth}
  header{background:linear-gradient(135deg,#1dd65f 0%,#11b557 50%,#0c9e50 100%);
         color:#fff;text-align:center;padding:clamp(1.4rem,4vw,2.6rem) 1rem;
         font-size:clamp(1.8rem,3.4vw,2.4rem);font-weight:700;letter-spacing:-.4px;
         position:sticky;top:0;z-index:20}

  main{flex:1;width:100%;max-width:950px;margin:auto;padding:2rem 1.25rem;
       display:flex;flex-direction:column;gap:3rem}

  .hero{display:flex;flex-direction:column;align-items:center;text-align:center;gap:1.1rem}
  .hero h1{font-size:clamp(1.35rem,3vw,1.95rem);font-weight:600;line-height:1.34}
  .hero p{max-width:560px;opacity:.85}
  .cta-btn{border:2px solid var(--brand);background:#fff;color:var(--brand);
           padding:.8rem 1.55rem;border-radius:70px;font-weight:600;cursor:pointer;
           transition:var(--t)}
  .cta-btn:hover{background:var(--brand);color:#fff;transform:translateY(-3px)}

  .features{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:1.6rem}
  .feature{background:var(--card);padding:1.6rem;border-radius:var(--radius);box-shadow:var(--shadow);
           text-align:center;display:flex;flex-direction:column;gap:.65rem;
           transition:transform .35s var(--t);opacity:0;transform:translateY(30px)}
  .feature:hover{transform:translateY(-8px)}
  .feature i{font-size:2rem;color:var(--brand)}

  #weatherCard,#planesCard{background:var(--card);padding:1.6rem;border-radius:var(--radius);box-shadow:var(--shadow);display:flex;flex-direction:column;gap:.6rem}
  #weatherCard span{font-size:1.4rem;font-weight:600}
  #planesCard h3{font-size:1.2rem;margin:0 auto .4rem;text-align:center}
  #planesMap{height:300px;width:100%;border-radius:var(--radius)}

  #chat{background:var(--card);border-radius:var(--radius);box-shadow:var(--shadow);
        overflow:hidden;display:flex;flex-direction:column;min-height:500px}
  #messages{flex:1;overflow-y:auto;padding:1.1rem;scroll-behavior:smooth}
  .msg{margin-bottom:1rem}
  .bubble{display:inline-block;padding:.8rem 1rem;border-radius:var(--radius);max-width:85%;animation:pop .25s}
  .ai img{max-width:100%;border-radius:var(--radius);display:block;margin-top:.4rem}
  .user{text-align:right}.ai{text-align:left}
  .user .bubble{background:var(--brand);color:#fff}
  .ai   .bubble{background:#0d0d0d;color:var(--text)}
  @keyframes pop{from{opacity:0;transform:scale(.85)}to{opacity:1;transform:scale(1)}}

  #inputBar{background:rgba(255,255,255,.07);backdrop-filter:blur(10px);
            padding:1rem;border-top:1px solid rgba(255,255,255,.09);
            display:flex;flex-direction:column;gap:.75rem}
  #q{flex:1;padding:.85rem 1rem;border:none;border-radius:70px;font-size:1rem;color:#000;background:#fff}
  .note{color:var(--brand);font-size:.85rem;font-weight:600;margin-bottom:.25rem;text-align:center}
  #btnRow{display:flex;gap:.8rem;flex-wrap:wrap}
  button{border:none;padding:.82rem 1.45rem;border-radius:70px;font-weight:600;font-size:1rem;cursor:pointer;transition:var(--t)}
  #send{background:var(--brand);color:#fff}
  #search{background:var(--brand-dark);color:#fff}
  #picture,#contest{background:#3b3b3b;color:#fff}
  #send:hover:not(:disabled),#search:hover:not(:disabled),#picture:hover:not(:disabled),#contest:hover:not(:disabled){transform:translateY(-2px)}
  button:disabled{opacity:.55}

  #quotaBar{height:6px;background:#333;border-radius:4px;overflow:hidden}
  #quotaFill{height:100%;background:var(--brand);width:0%}

  .overlay{position:fixed;inset:0;background:rgba(0,0,0,.6);display:none;align-items:center;justify-content:center;z-index:1000}
  .modal{background:var(--card);padding:1.8rem;border-radius:var(--radius);box-shadow:var(--shadow);max-width:340px;text-align:center;display:flex;flex-direction:column;gap:1.2rem}
  .modal button{padding:.7rem 1rem;border:none;border-radius:70px;font-weight:600;font-size:1rem;cursor:pointer;transition:var(--t)}
  .ok{background:var(--brand);color:#fff}.edit{background:#444;color:#fff}.cPrompt{background:#444;color:#fff;width:100%}

  /* floating dashboard button */
  #dashboardBtn{position:fixed;bottom:24px;right:24px;z-index:30;background:var(--brand-dark);color:#fff;border:none;border-radius:70px;padding:.9rem 1.6rem;font-weight:600;font-size:1rem;box-shadow:var(--shadow);cursor:pointer;transition:var(--t)}
  #dashboardBtn:hover{transform:translateY(-3px)}
  </style>
</head>
<body>

<header>Greenwood&nbsp;Helper</header>

<!-- FLOATING DASHBOARD BUTTON -->
<button id="dashboardBtn">Dashboard</button>

<main>
  <!-- HERO -->
  <section class="hero">
    <h1>Your local AI companion for everything Greenwood Village, CO üå≤</h1>
    <p>Ask about traffic, events, restaurants, services, and more ‚Äì Greenwood Helper has hyper-local answers in seconds.</p>
    <button class="cta-btn" onclick="document.getElementById('chat').scrollIntoView({behavior:'smooth'})">Try it now</button>
  </section>

  <!-- WEATHER -->
  <section id="weatherCard">
    <span id="wTemp">‚Äì¬∞F</span>
    <div id="wDesc">Loading weather‚Ä¶</div>
    <small id="wHiLo"></small>
  </section>

  <!-- PLANES MAP -->
  <section id="planesCard">
    <h3>Live Flights Above Greenwood</h3>
    <div id="planesMap"></div>
  </section>

  <!-- FEATURES -->
  <section class="features">
    <div class="feature"><i>üó∫Ô∏è</i><h3>Fastest Routes</h3><p>Real-time shortcuts around town.</p></div>
    <div class="feature"><i>üçΩÔ∏è</i><h3>Local Eats</h3><p>Find top places to dine.</p></div>
    <div class="feature"><i>üéâ</i><h3>Events & Activities</h3><p>What‚Äôs happening this week.</p></div>
    <div class="feature"><i>üö®</i><h3>Live Traffic</h3><p>Avoid jams with minute-by-minute updates.</p></div>
    <div class="feature"><i>‚úàÔ∏è</i><h3>Planes Overhead</h3><p>Now on a live map!</p></div>
    <div class="feature"><i>üèÜ</i><h3>Local Contests</h3><p>Enter & vote in community contests.</p></div>
  </section>

  <!-- CHAT -->
  <section id="chat">
    <div id="messages"></div>

    <form id="inputBar" onsubmit="return false;">
      <input id="q" placeholder="Ask me anything about Greenwood Village‚Ä¶" autocomplete="off">
      <div id="quotaBar"><div id="quotaFill"></div></div>

      <div id="btnRow">
        <button id="send" type="button">Send</button>
        <div style="display:flex;flex-direction:column;align-items:center;gap:.1rem">
          <span class="note">Real-Time Results!</span>
          <button id="search" type="button">Search Web</button>
        </div>
        <button id="picture" type="button">Make Picture</button>
        <button id="contest" type="button">Contest ?</button>
      </div>
    </form>
  </section>
</main>

<!-- SEARCH WARNING POP-UP -->
<div id="confirmOverlay" class="overlay">
  <div class="modal">
    <p>If you didn‚Äôt type ‚Äú<strong>Greenwood Village CO</strong>‚Äù it may search for another Greenwood!</p>
    <div style="display:flex;gap:.8rem;justify-content:center;flex-wrap:wrap">
      <button id="okBtn"   class="ok">All good!</button>
      <button id="editBtn" class="edit">Edit message</button>
    </div>
  </div>
</div>

<!-- CONTEST OVERLAY -->
<div id="contestOverlay" class="overlay">
  <div class="modal">
    <h3 style="margin-bottom:.4rem">Local Contests</h3>
    <p style="font-size:.9rem;opacity:.8;margin-bottom:.8rem">Pick one to auto-fill your question.</p>
    <button class="cPrompt" data-prompt="Tell me about entering the Greenwood Village Photo Contest üì∏">üì∏ Photo Contest</button>
    <button class="cPrompt" data-prompt="How do I participate in the Greenwood Village Garden Show? üåº">üåº Garden Show</button>
    <button id="cClose" class="edit" style="margin-top:1rem">Close</button>
  </div>
</div>

<!-- SCRIPTS -->
<!-- WEATHER -->
<script>
(async () => {
  try {
    const url = 'https://api.open-meteo.com/v1/forecast?latitude=39.61&longitude=-104.91&hourly=temperature_2m,weather_code&daily=temperature_2m_max,temperature_2m_min&temperature_unit=fahrenheit&timezone=America/Denver';
    const d = await fetch(url).then(r => r.json());
    const h = new Date().getHours();
    const t  = Math.round(d.hourly.temperature_2m[h]);
    const c  = d.hourly.weather_code[h];
    const hi = Math.round(d.daily.temperature_2m_max[0]);
    const lo = Math.round(d.daily.temperature_2m_min[0]);
    const names = {0:'Clear',1:'Mainly clear',2:'Partly cloudy',3:'Overcast',45:'Fog',48:'Frozen fog',
                   51:'Light drizzle',53:'Drizzle',55:'Heavy drizzle',61:'Light rain',63:'Rain',
                   65:'Heavy rain',71:'Light snow',73:'Snow',75:'Heavy snow',95:'Thunderstorm'};
    document.getElementById('wTemp').textContent = `${t}¬∞F`;
    document.getElementById('wDesc').textContent = names[c] || '‚Äì‚Äì';
    document.getElementById('wHiLo').textContent = `Hi ${hi}¬∞ / Lo ${lo}¬∞`;
  } catch {
    document.getElementById('wDesc').textContent = 'Weather unavailable';
  }
})();
</script>

<!-- PLANES MAP -->
<script>
(function () {
  const map = L.map('planesMap', {zoomControl:false}).setView([39.61,-104.91], 11);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {attribution:'¬© OpenStreetMap'}).addTo(map);

  const bbox = {lamin:39.55,lamax:39.70,lomin:-105.10,lomax:-104.70};
  const markers = {};

  async function loadPlanes() {
    try {
      const url = `https://corsproxy.io/?https://opensky-network.org/api/states/all?lamin=${bbox.lamin}&lomin=${bbox.lomin}&lamax=${bbox.lamax}&lomax=${bbox.lomax}`;
      const data = await fetch(url).then(r => r.json());
      const seen = new Set();

      (Array.isArray(data.states) ? data.states : []).forEach(s => {
        const id = s[0], lat = s[6], lon = s[5];
        if (!lat || !lon) return;
        seen.add(id);
        if (markers[id]) {
          markers[id].setLatLng([lat,lon]);
        } else {
          markers[id] = L.circleMarker([lat,lon], {radius:6,weight:1,color:'#23c463',fillOpacity:.8}).addTo(map);
        }
      });

      Object.keys(markers).forEach(id => { if (!seen.has(id)) { map.removeLayer(markers[id]); delete markers[id]; }});
    } catch {/* silent */}
  }

  loadPlanes();
  setInterval(loadPlanes, 60000);
})();
</script>

<script>
(function (init) {
  document.readyState !== 'loading' ? init() : document.addEventListener('DOMContentLoaded', init);
})(main);

function main() {
/* ---- CONFIG ---- */
const API   = 'https://greenwood-helper-proxy.jenny-hoffman927.workers.dev/chat/completions';
const MODEL = 'gpt-4o-mini';
const SYS   = `ROLE‚ñ∏You are Greenwood Helper, the hyper-local concierge for Greenwood Village, CO.
SCOPE‚ñ∏Answer only GV-related questions unless ‚ÄúwebSearch‚Äù context is supplied.
STYLE‚ñ∏‚â§60 words, upbeat, 1 emoji max, never mention ‚ÄúAI‚Äù.`;
const LIMIT = 20;

/* ---- DOM ---- */
const $      = id => document.getElementById(id);
const q      = $('q'), send=$('send'), search=$('search'), picture=$('picture'), contest=$('contest');
const overlay= $('confirmOverlay'), okBtn=$('okBtn'), editBtn=$('editBtn');
const cOv    = $('contestOverlay'), cClose=$('cClose');
const dash   = $('dashboardBtn');
const cBtns  = document.querySelectorAll('.cPrompt');

/* ---- QUOTA ---- */
const store={read(){try{return JSON.parse(localStorage.gvCnt||'{}');}catch{return {}}},write(v){try{localStorage.gvCnt=JSON.stringify(v);}catch{}}};
const today=()=>new Date().toISOString().slice(0,10);
const getCnt=()=>store.read().d===today()?store.read().c:0;
const bump =()=>store.write({d:today(),c:getCnt()+1});
const paint=()=>$('quotaFill').style.width=Math.min(100,getCnt()/LIMIT*100)+'%';

/* ---- HELPERS ---- */
const banner=m=>{const d=document.createElement('div');d.textContent='‚ö† '+m;Object.assign(d.style,{position:'fixed',bottom:0,left:0,right:0,padding:'8px',background:'#c62828',color:'#fff',fontFamily:'sans-serif',zIndex:9999});document.body.append(d);setTimeout(()=>d.remove(),6000);};
const bubble=(html,cls)=>{$('messages').insertAdjacentHTML('beforeend',`<div class="msg ${cls}"><span class="bubble">${html}</span></div>`);$('messages').scrollTop=$('messages').scrollHeight;};
const lock=x=>{send.disabled=search.disabled=picture.disabled=contest.disabled=x;};

/* ---- DUCKDUCKGO ---- */
async function webSearch(qry){
  const url=`https://api.duckduckgo.com/?q=${encodeURIComponent(qry)}&format=json&no_html=1&skip_disambig=1`;
  const r=await fetch(url);
  if(!r.ok) throw new Error('Web search failed');
  const j=await r.json();
  let ctx='';
  if(j.AbstractText) ctx+='Result: '+j.AbstractText+'\n';
  if(Array.isArray(j.RelatedTopics)) j.RelatedTopics.slice(0,3).forEach(t=>{
    if(typeof t.Text==='string') ctx+='- '+t.Text+'\n';
  });
  return ctx || 'No direct answer found.';
}

/* ---- CHAT ---- */
async function askAI(userTxt,extraCtx=''){
  const body={model:MODEL,max_tokens:128,
              messages:[{role:'system',content:SYS+extraCtx},{role:'user',content:userTxt}]};
  const r=await fetch(API,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)});
  if(!r.ok) throw new Error(await r.text());
  const j=await r.json();
  return (j.choices?.[0]?.message?.content || '').trim() || '[no reply]';
}

/* ---- IMAGE --- */
const generateImage = prompt => `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}`;

/* ---- FLOWS ---- */
async function talk(userTxt,useWeb){
  if(getCnt()>=LIMIT){banner('Daily limit reached');return;}
  bubble(userTxt,'user'); lock(true); q.value='';
  try{
    let ctx='';
    if(useWeb){ bubble('üîç web searching‚Ä¶','ai'); ctx=`\n\nwebSearch‚ñ∏${await webSearch(userTxt)}\n\n`; }
    bubble(await askAI(userTxt,ctx),'ai');
  }catch(e){ bubble('Error: '+e.message,'ai'); }
  finally{ bump(); paint(); lock(false); }
}

async function pictureFlow(prompt){
  if(!prompt) return;
  bubble('üñºÔ∏è generating image‚Ä¶','ai'); lock(true); q.value='';
  try{ bubble(`<img src="${generateImage(prompt)}" alt="${prompt}">`,'ai'); }
  catch(e){ bubble('Error: '+e.message,'ai'); }
  finally{ bump(); paint(); lock(false); }
}

/* ---- EVENTS ---- */
send.onclick    = ()=>{ const txt=q.value.trim(); if(txt) talk(txt,false); };
picture.onclick = ()=>{ const txt=q.value.trim(); pictureFlow(txt); };
search.onclick  = ()=>{ const txt=q.value.trim(); if(!txt) return; overlay.style.display='flex';
                        okBtn.onclick=()=>{overlay.style.display='none';talk(txt,true);};
                        editBtn.onclick=()=>{overlay.style.display='none';q.focus();}; };
q.onkeydown     = e=>{ if(e.key==='Enter') send.click(); };

contest.onclick = ()=> cOv.style.display='flex';
dash.onclick    = ()=> cOv.style.display='flex';
cClose.onclick  = ()=> cOv.style.display='none';
cBtns.forEach(b=>b.onclick=()=>{ q.value=b.dataset.prompt || ''; cOv.style.display='none'; q.focus(); });

/* fade-ins & quota bar */
const obs=new IntersectionObserver((e,o)=>e.forEach(n=>{ if(n.isIntersecting){ n.target.style.opacity=1;n.target.style.transform='none'; o.unobserve(n.target); } }),{threshold:.2});
document.querySelectorAll('.feature').forEach(c=>obs.observe(c));
paint();
}
</script>
</body>
</html>
